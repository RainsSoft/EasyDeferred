using System;
using System.ComponentModel;
using System.Threading;
using EasyDeferred.RSG;
using EasyDeferred.Threading;

namespace EasyDeferred
{
    /////<summary>
    ///// Uses wpf dispatcher tu run <see cref="Delegate"/> in gui thread
    /////</summary>
    //public class GuiThreadProvider 
    //{
    //    private readonly Dispatcher _dispatcher;


    //    ///<summary>
    //    /// Initializes thread provider with current dispatcher
    //    ///</summary>
    //    ///<param name="dispatcher"></param>
    //    public GuiThreadProvider() {
    //        _dispatcher = Dispatcher.CurrentDispatcher;

    //    }
    //    /// <summary>
    //    /// responsible for providing provided dispatcher to all class that needs it
    //    /// </summary>
    //    /// <param name="dispatcher"></param>
    //    public GuiThreadProvider(Dispatcher dispatcher) {
    //        _dispatcher = dispatcher;
    //    }

    //    public void RunInGui(TimeSpan timeout,Action action) {
    //        if (_dispatcher.CheckAccess())
    //            action();
    //        else
    //            _dispatcher.Invoke(timeout,new DispatcherOperationCallback((Z)=>{
    //                action();
    //                return null;
    //            }),null);
    //    }
    //}

    ///// <summary>
    ///// Wrapper class that implements ISynchronizeInvoke for WPF applications.</summary>
    ///// <remarks>
    ///// The ISynchronizeInvoke and DispatcherAsyncResultAdapter implementations were provided by Rob Paveza, from this post:
    ///// http://geekswithblogs.net/robp/archive/2008/03/28/why-doesnt-dispatcher-implement-isynchronizeinvoke.aspx </remarks>
    //[Export(typeof(IInitializable))]
    //[Export(typeof(ISynchronizeInvoke))]
    //sealed class TestSynchronizeInvoke : ISynchronizeInvoke//, IInitializable
    //{
    //    #region IInitializable

    //    /// <summary>
    //    /// Complete initialization for the component</summary>
    //    public void Initialize() {
    //        m_uiDispatcher = Dispatcher.CurrentDispatcher;
    //    }

    //    #endregion

    //    #region ISynchronizeInvoke

    //    /// <summary>
    //    /// Asynchronously executes the delegate on the thread that created this object.</summary>
    //    /// <param name="method">A Delegate to a method that takes parameters of the same number and
    //    /// type that are contained in args. </param>
    //    /// <param name="args">An array of type Object to pass as arguments to the given method. This 
    //    /// can be null if no arguments are needed. </param>
    //    /// <returns>An IAsyncResult interface that represents the asynchronous operation started by calling this method.</returns>
    //    public IAsyncResult BeginInvoke(Delegate method, object[] args) {
    //        if (args != null && args.Length > 1) {
    //            //object[] argsSansFirst = GetArgsAfterFirst(args);
    //            //DispatcherOperation op = m_uiDispatcher.BeginInvoke(DispatcherPriority.Normal, method, args[0], argsSansFirst);
    //            DispatcherOperation op = m_uiDispatcher.BeginInvoke(new DispatcherOperationCallback((Z)=> method.DynamicInvoke(args)), args[0]);
    //            return new DispatcherAsyncResultAdapter(op);
    //        }
    //        else {
    //            if (args != null) {
    //                //return new DispatcherAsyncResultAdapter(m_uiDispatcher.BeginInvoke(DispatcherPriority.Normal, method, args[0]));
    //                DispatcherOperation op = m_uiDispatcher.BeginInvoke(new DispatcherOperationCallback((Z) => method.DynamicInvoke(args)), args[0]);
    //                return new DispatcherAsyncResultAdapter(op);
    //            }
    //            else {
    //                //return new DispatcherAsyncResultAdapter(m_uiDispatcher.BeginInvoke(DispatcherPriority.Normal, method));
    //                DispatcherOperation op = m_uiDispatcher.BeginInvoke(new DispatcherOperationCallback((Z) => method.DynamicInvoke(null)), null);
    //                return new DispatcherAsyncResultAdapter(op);
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Waits until the process started by calling BeginInvoke completes, and then returns the 
    //    /// value generated by the process.</summary>
    //    /// <param name="result">An IAsyncResult interface that represents the asynchronous operation 
    //    /// started by calling BeginInvoke. </param>
    //    /// <returns>An Object that represents the return value generated by the asynchronous operation.</returns>
    //    public object EndInvoke(IAsyncResult result) {
    //        DispatcherAsyncResultAdapter res = result as DispatcherAsyncResultAdapter;
    //        if (res == null)
    //            throw new InvalidCastException();


    //        while (res.Operation.Status != DispatcherOperationStatus.Completed || res.Operation.Status == DispatcherOperationStatus.Aborted) {
    //            Thread.Sleep(50);
    //        }

    //        return res.Operation.Result;
    //    }

    //    /// <summary>
    //    /// Synchronously executes the delegate on the thread that created this object and 
    //    /// marshals the call to the creating thread.</summary>
    //    /// <param name="method">A Delegate that contains a method to call, in the context of 
    //    /// the thread for the control. </param>
    //    /// <param name="args">An array of type Object that represents the arguments to pass to 
    //    /// the given method. This can be null if no arguments are needed. </param>
    //    /// <returns>An Object that represents the return value from the delegate being invoked, 
    //    /// or null if the delegate has no return value.</returns>
    //    public object Invoke(Delegate method, object[] args) {
    //        if (args != null && args.Length > 1) {
    //            // object[] argsSansFirst = GetArgsAfterFirst(args);
    //            //return m_uiDispatcher.Invoke(DispatcherPriority.Normal, method, args[0], argsSansFirst);
                
    //            return m_uiDispatcher.Invoke(TimeSpan.FromSeconds(60), new DispatcherOperationCallback((Z)=> { return method.DynamicInvoke(args); }), args[0]);
    //        }
    //        else {
    //            if (args != null) {
    //                //return m_uiDispatcher.Invoke(DispatcherPriority.Normal, method, args[0]);
    //                return m_uiDispatcher.Invoke(TimeSpan.FromSeconds(60), new DispatcherOperationCallback((Z) => { return method.DynamicInvoke(args); }), args[0]);
    //            }
    //            else {
    //                //return m_uiDispatcher.Invoke(DispatcherPriority.Normal, method);
    //                return m_uiDispatcher.Invoke(TimeSpan.FromSeconds(60), new DispatcherOperationCallback((Z) => { return method.DynamicInvoke(null); }), null);
    //            }

    //        }
    //    }

    //    /// <summary>
    //    /// Gets a value indicating whether the caller must call Invoke when calling 
    //    /// an object that implements this interface.</summary>
    //    public bool InvokeRequired {
    //        get { return m_uiDispatcher.Thread != Thread.CurrentThread; }
    //    }

    //    #endregion

    //    private static object[] GetArgsAfterFirst(object[] args) {
    //        object[] result = new object[args.Length - 1];
    //        Array.Copy(args, 1, result, 0, args.Length - 1);
    //        return result;
    //    }

    //    private class DispatcherAsyncResultAdapter : IAsyncResult
    //    {
    //        public DispatcherAsyncResultAdapter(DispatcherOperation operation) {
    //            m_op = operation;
    //        }

    //        public DispatcherAsyncResultAdapter(DispatcherOperation operation, object state)
    //            : this(operation) {
    //            m_state = state;
    //        }

    //        public DispatcherOperation Operation {
    //            get { return m_op; }
    //        }

    //        #region IAsyncResult Members

    //        public object AsyncState {
    //            get { return m_state; }
    //        }

    //        public WaitHandle AsyncWaitHandle {
    //            get { return null; }
    //        }

    //        public bool CompletedSynchronously {
    //            get { return false; }
    //        }

    //        public bool IsCompleted {
    //            get { return m_op.Status == DispatcherOperationStatus.Completed; }
    //        }

    //        #endregion

    //        private DispatcherOperation m_op;
    //        private object m_state;
    //    }

    //    private Dispatcher m_uiDispatcher;
    //}

    //sealed class TestSynchronizeInvoke2 :  ISynchronizeInvoke
    //{
    //    readonly Dispatcher dispatcher;
    //    readonly SynchronizationContext synchronizationContext;

    //    public TestSynchronizeInvoke2(Dispatcher dispatcher, SynchronizationContext synchronizationContext) {
    //        this.dispatcher = dispatcher;
    //        this.synchronizationContext = synchronizationContext;
    //    }

    //    public Thread Thread {
    //        get { return dispatcher.Thread; }
    //    }

    //    public Dispatcher Dispatcher {
    //        get { return dispatcher; }
    //    }

    //    public SynchronizationContext SynchronizationContext {
    //        get { return synchronizationContext; }
    //    }

    //    public ISynchronizeInvoke SynchronizingObject {
    //        get { return this; }
    //    }

    //    public bool InvokeRequired {
    //        get { return !dispatcher.CheckAccess(); }
    //    }

    //    public bool CheckAccess() {
    //        return dispatcher.CheckAccess();
    //    }

    //    public void VerifyAccess() {
    //        dispatcher.VerifyAccess();
    //    }

    //    public void InvokeIfRequired(Action callback) {
    //        if (dispatcher.CheckAccess())
    //            callback();
    //        else {
    //            //dispatcher.Invoke(callback);
    //            dispatcher.Invoke(TimeSpan.FromSeconds(60), new DispatcherOperationCallback((Z) => {
    //                callback();
    //                return null;
    //            }), null);
    //        }
    //    }

    //    //public void InvokeIfRequired(Action callback, DispatcherPriority priority) {
    //    //    if (dispatcher.CheckAccess())
    //    //        callback();
    //    //    else
    //    //        dispatcher.Invoke(callback, priority);
    //    //}

    //    //public void InvokeIfRequired(Action callback, DispatcherPriority priority, CancellationToken cancellationToken) {
    //    //    if (dispatcher.CheckAccess())
    //    //        callback();
    //    //    else
    //    //        dispatcher.Invoke(callback, priority, cancellationToken);
    //    //}

    //    public T InvokeIfRequired<T>(Func<T> callback) {
    //        if (dispatcher.CheckAccess())
    //            return callback();
    //        else {
    //            //return dispatcher.Invoke(callback);
    //            return (T)dispatcher.Invoke(TimeSpan.FromSeconds(60),new DispatcherOperationCallback((Z) => {
    //                return callback();
    //                //return null;
    //            }), null);
    //        }
    //    }

    //    //public T InvokeIfRequired<T>(Func<T> callback, DispatcherPriority priority) {
    //    //    if (dispatcher.CheckAccess())
    //    //        return callback();
    //    //    else
    //    //        return dispatcher.Invoke(callback, priority);
    //    //}

    //    //public T InvokeIfRequired<T>(Func<T> callback, DispatcherPriority priority, CancellationToken cancellationToken) {
    //    //    if (dispatcher.CheckAccess())
    //    //        return callback();
    //    //    else
    //    //        return dispatcher.Invoke(callback, priority, cancellationToken);
    //    //}

    //    //public Task InvokeAsync(Action callback) {
    //    //    return dispatcher.InvokeAsync(callback).Task;
    //    //}

    //    //public Task InvokeAsync(Action callback, DispatcherPriority priority) {
    //    //    return dispatcher.InvokeAsync(callback, priority).Task;
    //    //}

    //    //public Task InvokeAsync(Action callback, DispatcherPriority priority, CancellationToken cancellationToken) {
    //    //    return dispatcher.InvokeAsync(callback, priority, cancellationToken).Task;
    //    //}

    //    //public Task<T> InvokeAsync<T>(Func<T> callback) {
    //    //    return dispatcher.InvokeAsync(callback).Task;
    //    //}

    //    //public Task<T> InvokeAsync<T>(Func<T> callback, DispatcherPriority priority) {
    //    //    return dispatcher.InvokeAsync(callback, priority).Task;
    //    //}

    //    //public Task<T> InvokeAsync<T>(Func<T> callback, DispatcherPriority priority, CancellationToken cancellationToken) {
    //    //    return dispatcher.InvokeAsync(callback, priority, cancellationToken).Task;
    //    //}

    //    public void InvokeAsyncAndForget(Action callback) {
    //        //dispatcher.BeginInvoke(callback);
    //        dispatcher.BeginInvoke(new DispatcherOperationCallback((Z) =>{
    //            callback();
    //            return null;
    //        }),null);
    //    }

    //    //public void InvokeAsyncAndForget(Action callback, DispatcherPriority priority) {
    //    //    dispatcher.BeginInvoke(callback, priority);
    //    //}

    //    //public async void CallLater(TimeSpan delay, Action method) {
    //    //    await Task.Delay(delay).ConfigureAwait(false);
    //    //    InvokeAsyncAndForget(method);
    //    //}

    //    //IAsyncResult ISynchronizeInvoke.BeginInvoke(Delegate method, object[] args) {
    //    //    return dispatcher.BeginInvoke(method, args).Task;
    //    //}

    //    //object ISynchronizeInvoke.EndInvoke(IAsyncResult result) {
    //    //    return ((Task<object>)result).Result;
    //    //}

    //    object ISynchronizeInvoke.Invoke(Delegate method, object[] args) {
    //        throw new Exception("");
    //        //return dispatcher.Invoke(method, args);
    //    }

    //    public IAsyncResult BeginInvoke(Delegate method, object[] args) {
    //        throw new NotImplementedException();
    //    }

    //    public object EndInvoke(IAsyncResult result) {
    //        throw new NotImplementedException();
    //    }
    //}
}
